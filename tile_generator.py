#!/usr/bin/env python3

import png
import sys

TILE_W, TILE_H = 6, 8

# TODO: DON'T KEEP FONT IN RAM, USE LPM TO LOAD IT

# Note: also, only '_' actually uses a pixel on the far left in any of its rows; we might be able to
# cut down to 5-wide characters that always emit a background pixel on the far left

HEADER = """
;;; ============================================================================
;;; This is a code tile font file generated by tile_generator.py from:
;;;     {}
;;;
;;; It is intended for usage with video mode 96.

#include "../videoMode.def.h"

	.section .data

	.global m96_font
m96_font:"""[1:]

TILE_ROW_DATA = """
	.byte	0b{3}{4}{5}{6}{7}{8}	;; TILE {0},{1} row {2}"""

TILE_ROW_ASM = """
	out	VIDEO_PORT, {3}
	sbrs	r6, 0
	rjmp	1f
	ld	r20, Y+
	out	VIDEO_PORT, {4}
	ld	r4, Y+
	rjmp	2f
1:
	ld	r4, Y+
	out	VIDEO_PORT, {4}
	ld	r20, Y
	swap	r20
2:
	out	VIDEO_PORT, {5}
	andi	r20, 0x0F

	lsl	r20

	ldi	XL, lo8(m96_palette)
	add	XL, r20

	out	VIDEO_PORT, {6}
	mul	r4, r5

	add	r0, r22
	out	VIDEO_PORT, {7}
	adc	r1, r23
	movw	r30, r0
	dec	r6
	out	VIDEO_PORT, {8}
	ld	r19, X+
	ld	r18, X
	breq	.+2
	ijmp
	ret
"""

def load_png(filepath):
    reader = png.Reader(filepath)
    w, h, image, m = reader.read()
    ret = list(image)
    return w, h, ret, m

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: tile_generator.py FILE.PNG OUTPUT_DIR")
        exit(1)

    FILEPATH = sys.argv[1]
    if not FILEPATH.endswith('.png'):
        print("Not running on non-PNG file '{}'".format(FILEPATH))
        exit(1)

    OUTPUT_DIR = sys.argv[2]
    if not OUTPUT_DIR.endswith('/'):
        OUTPUT_DIR += '/'

    try:
        FILENAME = FILEPATH[FILEPATH.rindex('/')+1:]
    except ValueError:
        # substring not found
        FILENAME = FILEPATH

    OUTPUT = OUTPUT_DIR + FILENAME[0:-4] + ".s"
        
    PNG_W_PX, PNG_H_PX, pixels, metadata = load_png(FILEPATH)
    W, H = int(PNG_W_PX/TILE_W), int(PNG_H_PX/TILE_H) # width, height of our image, in tiles

    with open(OUTPUT, 'w') as f:
        f.write(HEADER.format(FILEPATH))
        for tile_row in range(H):
            for tile_col in range(W):
                irow, icol = tile_row*TILE_H, tile_col*TILE_W
                tile = [foo[icol:icol+TILE_W] for foo in pixels[irow:irow+TILE_H]]

                for i in range(len(tile)):
                    f.write(TILE_ROW_DATA.format(tile_row, tile_col, i,
                                                 *['1' if x else '0' for x in tile[i]]))
